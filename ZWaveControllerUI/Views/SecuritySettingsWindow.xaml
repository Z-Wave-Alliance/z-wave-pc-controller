<UserControl x:Class="ZWaveControllerUI.Views.SecuritySettingsWindow"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:md="http://materialdesigninxaml.net/winfx/xaml/themes"
             xmlns:bind="clr-namespace:ZWaveControllerUI.Bind"
             xmlns:converters="clr-namespace:ZWaveControllerUI.Converters"
             xmlns:controls="clr-namespace:ZWaveControllerUI.Controls"
             xmlns:sys="clr-namespace:System;assembly=mscorlib"
             xmlns:enums="clr-namespace:ZWave.BasicApplication.Enums;assembly=ZWaveBasicApplication"
             xmlns:secureenums="clr-namespace:ZWave.BasicApplication.Security;assembly=ZWaveBasicApplication"
             xmlns:secureenums2="clr-namespace:ZWave.Security;assembly=ZWave"
             AutomationProperties.AutomationId="ID_SECURITY_SETTINGS_VIEW">
    <UserControl.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="pack://application:,,,/StylesAndColors.xaml"/>
            </ResourceDictionary.MergedDictionaries>
            <bind:CommandReference x:Key="CommandOk" Command="{Binding CommandOk}"/>
            <bind:CommandReference x:Key="CommandCancel" Command="{Binding CommandCancel}"/>
            <bind:CommandReference x:Key="CommandApply" Command="{Binding CommandApply}"/>
            <bind:CommandReference x:Key="BrowseFolder" Command="{Binding BrowseStorageFolderCommand}"/>

            <bind:CommandReference x:Key="CommandSetParameter" Command="{Binding CommandSetParameter}"/>
            <bind:CommandReference x:Key="CommandClearParameters" Command="{Binding CommandClearParameters}"/>
            <bind:CommandReference x:Key="CommandDeleteParameter" Command="{Binding CommandDeleteParameter}"/>

            <bind:CommandReference x:Key="CommandSetFrame" Command="{Binding CommandSetFrame}"/>
            <bind:CommandReference x:Key="CommandDeleteFrame" Command="{Binding CommandDeleteFrame}"/>
            <bind:CommandReference x:Key="CommandClearFrames" Command="{Binding CommandClearFrames}"/>
            
            <bind:CommandReference x:Key="CommandAddExtension" Command="{Binding CommandAddExtension}"/>
            <bind:CommandReference x:Key="CommandSetExtension" Command="{Binding CommandSetExtension}"/>
            <bind:CommandReference x:Key="CommandDeleteExtension" Command="{Binding CommandDeleteExtension}"/>
            <bind:CommandReference x:Key="CommandClearExtensions" Command="{Binding CommandClearExtensions}"/>
            
            <bind:CommandReference x:Key="CommandSaveSecurityTestParametersToFile" Command="{Binding CommandSaveSecurityTestParametersToFile}"/>
            <bind:CommandReference x:Key="CommandLoadSecurityTestParametersFromFile" Command="{Binding CommandLoadSecurityTestParametersFromFile}"/>
            
            <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />
            <converters:ByteArrayToStringConverter x:Key="ByteArrayToStringConverter"/>
            <converters:ByteToHexStringConverter x:Key="ByteToHexStringConverter"/>
            <converters:InvertBoolConverter x:Key="InvertBoolConverter"/>
            <converters:IsNotNullToVisibilityConverter x:Key="IsNotNullToVisibilityConverter" />
            <converters:ParameterS2EnumDescriptionValueConverter x:Key="ParameterS2EnumDescriptionValueConverter" />
            <converters:ParameterS2TypeToSymbolCountConverter x:Key="ParameterS2TypeToSymbolCountConverter" />
            <ObjectDataProvider MethodName="GetValues" ObjectType="{x:Type sys:Enum}" x:Key="PossibleValues">
                <ObjectDataProvider.MethodParameters>
                    <x:Type TypeName="secureenums:SecurityS2TestFrames"/>
                </ObjectDataProvider.MethodParameters>
            </ObjectDataProvider>
            <ObjectDataProvider MethodName="GetValues" ObjectType="{x:Type sys:Enum}" x:Key="PossibleExtensionTypeValues">
                <ObjectDataProvider.MethodParameters>
                    <x:Type TypeName="secureenums2:ExtensionTypes"/>
                </ObjectDataProvider.MethodParameters>
            </ObjectDataProvider>
            <ObjectDataProvider MethodName="GetValues" ObjectType="{x:Type sys:Enum}" x:Key="PossibleMessageTypeValues">
                <ObjectDataProvider.MethodParameters>
                    <x:Type TypeName="secureenums:MessageTypes"/>
                </ObjectDataProvider.MethodParameters>
            </ObjectDataProvider>
            <ObjectDataProvider MethodName="GetValues" ObjectType="{x:Type sys:Enum}" x:Key="PossibleAppliedActionValues">
                <ObjectDataProvider.MethodParameters>
                    <x:Type TypeName="secureenums:ExtensionAppliedActions"/>
                </ObjectDataProvider.MethodParameters>
            </ObjectDataProvider>
            <DataTemplate x:Key="ToggleSecurityDataTemplate">
                <StackPanel Orientation="Horizontal">
                    <md:PackIcon Kind="Pause" Width="24" Height="24" x:Name="PART_ToggleButtonPauseIcon"/>
                    <md:PackIcon Kind="Play" Width="24" Height="24" x:Name="PART_ToggleButtonPlayIcon" Visibility="Collapsed"/>
                    <TextBlock x:Name="PART_ToggleButtonContent" Text="Pause" VerticalAlignment="Center"/>
                </StackPanel>
                <DataTemplate.Triggers>
                    <DataTrigger Binding="{Binding IsPauseSecurity}" Value="True">
                        <Setter TargetName="PART_ToggleButtonContent" Property="Text" Value="Resume" />
                        <Setter TargetName="PART_ToggleButtonPlayIcon" Property="Visibility" Value="Visible" />
                        <Setter TargetName="PART_ToggleButtonPauseIcon" Property="Visibility" Value="Collapsed" />
                    </DataTrigger>
                </DataTemplate.Triggers>
            </DataTemplate>
        </ResourceDictionary>
    </UserControl.Resources>
    <DockPanel Margin="0"  >
        <!--IsEnabled="{Binding Path=IsReadOnlyView}"-->
        <StackPanel Margin="4" DockPanel.Dock="Top">
            <ToggleButton AutomationProperties.AutomationId="ID_BTN_ENABLE_SECURITY" IsChecked="{Binding IsPauseSecurity, Mode=TwoWay}" Content="{Binding}" ContentTemplate="{StaticResource ToggleSecurityDataTemplate}" />
        </StackPanel>
        <StackPanel Margin="4" DockPanel.Dock="Top" Orientation="Horizontal" IsEnabled="{Binding IsPauseSecurity, Converter={StaticResource InvertBoolConverter}}">
            <CheckBox Content="Enable S0; " AutomationProperties.AutomationId="ID_CHK_ENABLE_S0" IsChecked="{Binding IsEnabledSecurityS0, Mode=TwoWay}" ToolTip="Enable S0 Security"/>
            <CheckBox Content="Enable S2 Unauthenticated; " AutomationProperties.AutomationId="ID_CHK_ENABLE_UNAUTH" IsChecked="{Binding IsEnabledSecurityS2_UNAUTHENTICATED, Mode=TwoWay}"/>
            <CheckBox Content="Enable S2 Authenticated; " AutomationProperties.AutomationId="ID_CHK_ENABLE_AUTH" IsChecked="{Binding IsEnabledSecurityS2_AUTHENTICATED, Mode=TwoWay}"/>
            <CheckBox Content="Enable S2 Access; " AutomationProperties.AutomationId="ID_CHK_ENABLE_ACCESS" IsChecked="{Binding IsEnabledSecurityS2_ACCESS, Mode=TwoWay}"/>
            <CheckBox Content="Join with CSA" AutomationProperties.AutomationId="ID_CHK_JOIN_CSA" IsChecked="{Binding IsClientSideAuthS2Enabled, Mode=TwoWay}"/>
        </StackPanel>
        <UniformGrid Margin="4" DockPanel.Dock="Top" Columns="2">
            <DockPanel Background="AliceBlue">
                <TextBlock Width="100" Text="Network Key S0"/>
                <Rectangle Margin="1" Width="8" Height="Auto" Fill="{StaticResource SnkS0}"/>
                <Button ToolTip="Copy to Clipboard" Width="30" Height="Auto" DockPanel.Dock="Right" Click="CopyNetKeyS0ToClipboardButton_Click" AutomationProperties.AutomationId="ID_BTN_COPY_S0_KEY" >
                    <md:PackIcon Kind="ContentCopy"/>
                </Button>
                <TextBox Name="tbNetKeyS0" AutomationProperties.AutomationId="ID_TB_KEY_S0" IsReadOnly="True"
                         Text="{Binding ApplicationModel.ConfigurationItem.SecuritySettings.NetworkKeys[7].Value, Converter={StaticResource ByteArrayToStringConverter}}"/>
            </DockPanel>
            <Border Background="AliceBlue" IsEnabled="{Binding IsPauseSecurity, Converter={StaticResource InvertBoolConverter}}">
                <DockPanel IsEnabled="{Binding IsEnabledSecurityS0}">
                    <CheckBox Content="override" AutomationProperties.AutomationId="ID_CHK_OVRRD_S0" IsChecked="{Binding TestNetworkKeys[7].IsSet, Mode=TwoWay}"/>
                    <controls:TextBoxHexMask Text="{Binding TestNetworkKeys[7].Value, Converter={StaticResource ByteArrayToStringConverter}, Mode=TwoWay, UpdateSourceTrigger='PropertyChanged'}"
                                             SymbolsCount="32" AutomationProperties.AutomationId="ID_TB_OVRRD_S0"/>
                </DockPanel>
            </Border>
            <DockPanel Background="AliceBlue">
                <TextBlock Width="100" Text="Unauthenticated"/>
                <Rectangle Margin="1" Width="8" Height="Auto" Fill="{StaticResource SnkS2_UNAUTHENTICATED}"/>
                <Button ToolTip="Copy to Clipboard" Width="30" Height="Auto" DockPanel.Dock="Right" Click="CopyNetKeyC0ToClipboardButton_Click" AutomationProperties.AutomationId="ID_BTN_COPY_UNAUTH_KEY">
                    <md:PackIcon Kind="ContentCopy"/>
                </Button>
                <TextBox Name="tbNetKeyC0" AutomationProperties.AutomationId="ID_TB_UNAUTH" IsReadOnly="True" 
                         Text="{Binding ApplicationModel.ConfigurationItem.SecuritySettings.NetworkKeys[0].Value, Converter={StaticResource ByteArrayToStringConverter}}"/>
            </DockPanel>
            <Border Background="AliceBlue" IsEnabled="{Binding IsPauseSecurity, Converter={StaticResource InvertBoolConverter}}">
                <DockPanel IsEnabled="{Binding IsEnabledSecurityS2_UNAUTHENTICATED}">
                    <CheckBox Content="override" AutomationProperties.AutomationId="ID_CHK_OVRRD_UNAUTH" IsChecked="{Binding TestNetworkKeys[0].IsSet, Mode=TwoWay}"/>
                    <controls:TextBoxHexMask Text="{Binding TestNetworkKeys[0].Value, Converter={StaticResource ByteArrayToStringConverter}, Mode=TwoWay, UpdateSourceTrigger='PropertyChanged'}"
                                             SymbolsCount="32" AutomationProperties.AutomationId="ID_TB_OVRRD_UNAUTH"/>
                </DockPanel>
            </Border>
            <DockPanel Background="AliceBlue">
                <TextBlock Width="100" Text="Authenticated"/>
                <Rectangle Margin="1" Width="8" Height="Auto" Fill="{StaticResource SnkS2_AUTHENTICATED}"/>
                <Button ToolTip="Copy to Clipboard" Width="30" Height="Auto" DockPanel.Dock="Right" Click="CopyNetKeyC1ToClipboardButton_Click" AutomationProperties.AutomationId="ID_BTN_COPY_AUTH_KEY">
                    <md:PackIcon Kind="ContentCopy"/>
                </Button>
                <TextBox Name="tbNetKeyC1" AutomationProperties.AutomationId="ID_TB_AUTH" IsReadOnly="True" 
                         Text="{Binding ApplicationModel.ConfigurationItem.SecuritySettings.NetworkKeys[1].Value, Converter={StaticResource ByteArrayToStringConverter}}"/>
            </DockPanel>
            <Border Background="AliceBlue" IsEnabled="{Binding IsPauseSecurity, Converter={StaticResource InvertBoolConverter}}">
                <DockPanel IsEnabled="{Binding IsEnabledSecurityS2_AUTHENTICATED}">
                    <CheckBox Content="override" AutomationProperties.AutomationId="ID_CHK_OVRRD_AUTH" IsChecked="{Binding TestNetworkKeys[1].IsSet, Mode=TwoWay}"/>
                    <controls:TextBoxHexMask Text="{Binding TestNetworkKeys[1].Value, Converter={StaticResource ByteArrayToStringConverter}, Mode=TwoWay, UpdateSourceTrigger='PropertyChanged'}"
                                             SymbolsCount="32" AutomationProperties.AutomationId="ID_TB_OVRRD_AUTH"/>
                </DockPanel>
            </Border>
            <DockPanel Background="AliceBlue">
                <TextBlock  Width="100" Text="Access"/>
                <Rectangle Margin="1" Width="8" Height="Auto" Fill="{StaticResource SnkS2_ACCESS}"/>
                <Button ToolTip="Copy to Clipboard" Width="30" Height="Auto" DockPanel.Dock="Right" Click="CopyNetKeyC2ToClipboardButton_Click" AutomationProperties.AutomationId="ID_BTN_COPY_ACESS_KEY">
                    <md:PackIcon Kind="ContentCopy"/>
                </Button>
                <TextBox Name="tbNetKeyC2" AutomationProperties.AutomationId="ID_TB_ACCESS" IsReadOnly="True" 
                         Text="{Binding ApplicationModel.ConfigurationItem.SecuritySettings.NetworkKeys[2].Value, Converter={StaticResource ByteArrayToStringConverter}}"/>
            </DockPanel>
            <Border  Background="AliceBlue" IsEnabled="{Binding IsPauseSecurity, Converter={StaticResource InvertBoolConverter}}">
                <DockPanel IsEnabled="{Binding IsEnabledSecurityS2_ACCESS}">
                    <CheckBox Content="override" AutomationProperties.AutomationId="ID_CHK_OVRRD_ACCESS" IsChecked="{Binding TestNetworkKeys[2].IsSet, Mode=TwoWay}"/>
                    <controls:TextBoxHexMask Text="{Binding TestNetworkKeys[2].Value, Converter={StaticResource ByteArrayToStringConverter}, Mode=TwoWay, UpdateSourceTrigger='PropertyChanged'}"
                                             SymbolsCount="32" AutomationProperties.AutomationId="ID_TB_OVRRD_ACCESS"/>
                </DockPanel>
            </Border>

            <DockPanel Background="HoneyDew">
                <TextBlock Width="100" Text="LR Authenticated"/>
                <Rectangle Margin="1" Width="8" Height="Auto" Fill="{StaticResource SnkS2_AUTHENTICATED}"/>
                <Button ToolTip="Copy to Clipboard" Width="30" Height="Auto" DockPanel.Dock="Right" Click="CopyNetKeyLRC1ToClipboardButton_Click" AutomationProperties.AutomationId="ID_BTN_COPY_LR_AUTH_KEY">
                    <md:PackIcon Kind="ContentCopy"/>
                </Button>
                <TextBox Name="tbNetKeyLRC1" AutomationProperties.AutomationId="ID_TB_LR_AUTH" IsReadOnly="True" 
                         Text="{Binding ApplicationModel.ConfigurationItem.SecuritySettings.NetworkKeys[3].Value, Converter={StaticResource ByteArrayToStringConverter}}"/>
            </DockPanel>
            <Border Background="HoneyDew" IsEnabled="{Binding IsPauseSecurity, Converter={StaticResource InvertBoolConverter}}">
                <DockPanel IsEnabled="{Binding IsEnabledSecurityS2_AUTHENTICATED}">
                    <CheckBox Content="override" AutomationProperties.AutomationId="ID_CHK_OVRRD_LR_AUTH" IsChecked="{Binding TestNetworkKeys[3].IsSet, Mode=TwoWay}"/>
                    <controls:TextBoxHexMask Text="{Binding TestNetworkKeys[3].Value, Converter={StaticResource ByteArrayToStringConverter}, Mode=TwoWay, UpdateSourceTrigger='PropertyChanged'}"
                                             SymbolsCount="32" AutomationProperties.AutomationId="ID_TB_OVRRD_LR_AUTH"/>
                </DockPanel>
            </Border>
            <DockPanel Background="HoneyDew">
                <TextBlock  Width="100" Text="LR Access"/>
                <Rectangle Margin="1" Width="8" Height="Auto" Fill="{StaticResource SnkS2_ACCESS}"/>
                <Button ToolTip="Copy to Clipboard" Width="30" Height="Auto" DockPanel.Dock="Right" Click="CopyNetKeyLRC2ToClipboardButton_Click" AutomationProperties.AutomationId="ID_BTN_COPY_LR_ACESS_KEY">
                    <md:PackIcon Kind="ContentCopy"/>
                </Button>
                <TextBox Name="tbNetKeyLRC2" AutomationProperties.AutomationId="ID_TB_LR_ACCESS" IsReadOnly="True" 
                         Text="{Binding ApplicationModel.ConfigurationItem.SecuritySettings.NetworkKeys[4].Value, Converter={StaticResource ByteArrayToStringConverter}}"/>
            </DockPanel>
            <Border Background="HoneyDew" IsEnabled="{Binding IsPauseSecurity, Converter={StaticResource InvertBoolConverter}}">
                <DockPanel IsEnabled="{Binding IsEnabledSecurityS2_ACCESS}">
                    <CheckBox Content="override" AutomationProperties.AutomationId="ID_CHK_OVRRD_LR_ACCESS" IsChecked="{Binding TestNetworkKeys[4].IsSet, Mode=TwoWay}"/>
                    <controls:TextBoxHexMask Text="{Binding TestNetworkKeys[4].Value, Converter={StaticResource ByteArrayToStringConverter}, Mode=TwoWay, UpdateSourceTrigger='PropertyChanged'}"
                                             SymbolsCount="32" AutomationProperties.AutomationId="ID_TB_OVRRD_LR_ACCESS"/>
                </DockPanel>
            </Border>

            <DockPanel Background="White">
                <TextBlock  Width="100" Text="Last used Temp"/>
                <Rectangle Margin="1" Width="8" Height="Auto" Fill="Transparent"/>
                <Button ToolTip="Copy to Clipboard" Width="30" Height="Auto" DockPanel.Dock="Right" Click="CopyNetKeyTempToClipboardButton_Click" AutomationProperties.AutomationId="ID_BTN_COPY_TEMP_KEY">
                    <md:PackIcon Kind="ContentCopy"/>
                </Button>
                <TextBox Name="tbNetKeyTemp" AutomationProperties.AutomationId="ID_TB_KEYTEMP"  IsReadOnly="True" 
                         Text="{Binding NetworkKeyTemp, Mode=TwoWay, Converter={StaticResource ByteArrayToStringConverter}}"/>
            </DockPanel>
        </UniformGrid>
        <StackPanel Margin="4" DockPanel.Dock="Bottom" Orientation="Horizontal" HorizontalAlignment="Right" >
            <Button Content="OK" AutomationProperties.AutomationId="ID_BTN_OK" Command="{StaticResource CommandOk}" IsDefault="True"/>
            <Button Content="Cancel" AutomationProperties.AutomationId="ID_BTN_CANCEL" Command="{StaticResource CommandCancel}" IsCancel="True"/>
            <Button Content="Apply" Command="{StaticResource CommandApply}" IsDefault="False"/>
        </StackPanel>
        <DockPanel Margin="4" DockPanel.Dock="Bottom">
            <CheckBox Name="cbIsSaveKeys" IsChecked="{Binding IsSaveKeys}" HorizontalAlignment="Left"
                      AutomationProperties.AutomationId="CHK_SAVE_KEYS" >
                <StackPanel>
                    <TextBlock Text="Save Security Keys"/>
                    <TextBlock Text="to Storage Folder: "/>
                </StackPanel>
            </CheckBox>                     
            <Button DockPanel.Dock="Right" IsEnabled="{Binding IsChecked, ElementName=cbIsSaveKeys}" Width="40" Command="{StaticResource BrowseFolder}">
                <md:PackIcon Kind="Folder" Width="24" Height="24"/>
            </Button>
            <TextBox AutomationProperties.AutomationId="TB_SAVED_KEYS_STORAGE_PATH" 
                     Text="{Binding KeysStorageFolder}" IsEnabled="{Binding IsChecked, ElementName=cbIsSaveKeys}" Height="Auto" VerticalAlignment="Stretch" TextWrapping="Wrap"/>
        </DockPanel>
        <TabControl Margin="0,4" AutomationProperties.AutomationId="ID_TAB_CONTAINER_TEST_SCHEME">
            <TabItem Header="S0 Test Scheme" Selector.IsSelected="{Binding IsS0TabSelected}" AutomationProperties.AutomationId="ID_TAB_PAGE_S0_TEST_SCHEME">
                <ScrollViewer>
                     <StackPanel IsEnabled="{Binding IsPauseSecurity, Converter={StaticResource InvertBoolConverter}}">
                        <StackPanel Margin="4">
                            <CheckBox Content="Enable security test schema" 
                                      IsChecked="{Binding TestS0Settings.IsActive, Mode=TwoWay}"
                                      AutomationProperties.AutomationId="ID_CHK_ENABLE_S0_TEST_SCHEME"/>
                        </StackPanel>
                        <StackPanel Margin="4" IsEnabled="{Binding TestS0Settings.IsActive}" >
                            <GroupBox>
                                <GroupBox.Header>
                                    <RadioButton Content="Including Controller" IsChecked="True" AutomationProperties.AutomationId="ID_RB_INCLUDING_CONTROLLER"/>
                                </GroupBox.Header>
                                <UniformGrid Columns="2">
                                    <CheckBox Content="Invalid Nonce in Network Key Set:" IsChecked="{Binding TestS0Settings.NonceInNetworkKeySetSpecified, Mode=TwoWay}"
                                          AutomationProperties.AutomationId="ID_CHK_INVALID_NONCE_IN_NETWORK_SET_KEY"/>
                                    <controls:TextBoxHexMask Text="{Binding TestS0Settings.NonceInNetworkKeySet, Converter={StaticResource ByteArrayToStringConverter}, Mode=TwoWay, UpdateSourceTrigger='PropertyChanged'}" 
                                                         SymbolsCount="16" AutomationProperties.AutomationId="ID_TB_INVALID_NONCE_IN_NETWORK_SET_VALUE"/>
                                    <CheckBox Content="Invalid MAC in Network Key Set:" IsChecked="{Binding TestS0Settings.MACInNetworkKeySetSpecified, Mode=TwoWay}"
                                          AutomationProperties.AutomationId="ID_CHK_INVALID_MAC_IN_NETWORK_SET_KEY"/>
                                    <controls:TextBoxHexMask Text="{Binding TestS0Settings.MACInNetworkKeySet, Converter={StaticResource ByteArrayToStringConverter}, Mode=TwoWay, UpdateSourceTrigger='PropertyChanged'}" 
                                                         SymbolsCount="16" AutomationProperties.AutomationId="ID_TB_INVALID_MAC_IN_NETWORK_SET_VALUE"/>
                                    <CheckBox Content="Invalid Network Key  (Set):" IsChecked="{Binding TestS0Settings.ValueInNetworkKeySetSpecified, Mode=TwoWay}"
                                          AutomationProperties.AutomationId="ID_CHK_INVALID_NETWORK_KEY_SET_KEY"/>
                                    <controls:TextBoxHexMask Text="{Binding TestS0Settings.ValueInNetworkKeySet, Converter={StaticResource ByteArrayToStringConverter}, Mode=TwoWay, UpdateSourceTrigger='PropertyChanged'}" 
                                                         SymbolsCount="32" AutomationProperties.AutomationId="ID_TB_INVALID_NETWORK_KEY_SET_VALUE"/>
                                    <CheckBox Content="Send invalid Scheme Get:" IsChecked="{Binding TestS0Settings.ValueInSchemeGetSpecified, Mode=TwoWay}"
                                          AutomationProperties.AutomationId="ID_CHK_SEND_INVALID_SCHEME_GET_KEY"/>
                                    <controls:NumericUpDown Value="{Binding TestS0Settings.ValueInSchemeGet, Mode=TwoWay}"
                                                        AutomationProperties.AutomationId="ID_TB_SEND_INVALID_SCHEME_GET_VALUE"/>
                                    <CheckBox Content="Send invalid Scheme Inherit:" IsChecked="{Binding TestS0Settings.ValueInSchemeInheritSpecified, Mode=TwoWay}"
                                          AutomationProperties.AutomationId="ID_CHK_SEND_INVALID_SCHEME_INHERIT_KEY"/>
                                    <controls:NumericUpDown Value="{Binding TestS0Settings.ValueInSchemeInherit, Mode=TwoWay}"
                                                        AutomationProperties.AutomationId="ID_TB_SEND_INVALID_SCHEME_INHERIT_VALUE"/>
                                    <CheckBox Content="Delay Scheme Get (sec):" IsChecked="{Binding TestS0Settings.DelaySchemeGetSpecified, Mode=TwoWay}"
                                          AutomationProperties.AutomationId="ID_CHK_DELAY_SCHEME_GET_KEY"/>
                                    <controls:NumericUpDown Value="{Binding TestS0Settings.DelaySchemeGet, Mode=TwoWay}"
                                                        AutomationProperties.AutomationId="ID_TB_DELAY_SCHEME_GET_VALUE"/>
                                    <CheckBox Content="Delay Nonce Get (sec):" IsChecked="{Binding TestS0Settings.DelayNonceGetSpecified, Mode=TwoWay}"
                                          AutomationProperties.AutomationId="ID_CHK_DELAY_NONCE_GET_KEY"/>
                                    <controls:NumericUpDown Value="{Binding TestS0Settings.DelayNonceGet, Mode=TwoWay}"
                                                        AutomationProperties.AutomationId="ID_TB_DELAY_NONCE_GET_VALUE"/>
                                    <CheckBox Content="Delay Network Key Set (sec):" IsChecked="{Binding TestS0Settings.DelayNetworkKeySetSpecified, Mode=TwoWay}"
                                          AutomationProperties.AutomationId="ID_CHK_DELAY_NETWORK_KEY_SET_KEY"/>
                                    <controls:NumericUpDown Value="{Binding TestS0Settings.DelayNetworkKeySet, Mode=TwoWay}"
                                                        AutomationProperties.AutomationId="ID_TB_DELAY_NETWORK_KEY_SET_VALUE"/>
                                    <CheckBox Content="Delay Nonce Report (sec):" IsChecked="{Binding TestS0Settings.DelayNonceReportSpecified, Mode=TwoWay}"
                                          AutomationProperties.AutomationId="ID_CHK_DELAY_NONCE_REPORT_KEY"/>
                                    <controls:NumericUpDown Value="{Binding TestS0Settings.DelayNonceReport, Mode=TwoWay}"
                                                        AutomationProperties.AutomationId="ID_TB_DELAY_NONCE_REPORT_VALUE"/>
                                    <CheckBox Content="Delay Scheme Inherit (sec):" IsChecked="{Binding TestS0Settings.DelaySchemeInheritSpecified, Mode=TwoWay}"
                                          AutomationProperties.AutomationId="ID_CHK_DELAY_SCHEME_INHERIT_KEY"/>
                                    <controls:NumericUpDown Value="{Binding TestS0Settings.DelaySchemeInherit, Mode=TwoWay}"
                                                        AutomationProperties.AutomationId="ID_TB_DELAY_SCHEME_INHERIT_VALUE"/>
                                </UniformGrid>
                            </GroupBox>
                            <GroupBox>
                                <GroupBox.Header>
                                    <RadioButton Content="Included Node" IsChecked="True" AutomationProperties.AutomationId="ID_RB_INCLUDING_NODE"/>
                                </GroupBox.Header>
                                <UniformGrid Columns="2">
                                    <CheckBox Content="Invalid Nonce in Network Key Verify:" IsChecked="{Binding TestS0Settings.NonceInNetworkKeyVerifySpecified, Mode=TwoWay}"
                                          AutomationProperties.AutomationId="ID_CHK_INVALID_NONCE_IN_NETWORK_VERIFY_KEY"/>
                                    <controls:TextBoxHexMask Text="{Binding TestS0Settings.NonceInNetworkKeyVerify, Converter={StaticResource ByteArrayToStringConverter}, Mode=TwoWay, UpdateSourceTrigger='PropertyChanged'}" 
                                                         SymbolsCount="32" AutomationProperties.AutomationId="ID_CHK_INVALID_NONCE_IN_NETWORK_VERIFY_VALUE"/>
                                    <CheckBox Content="Invalid MAC in Network Key Verify:" IsChecked="{Binding TestS0Settings.MACInNetworkKeyVerifySpecified, Mode=TwoWay}"
                                          AutomationProperties.AutomationId="ID_CHK_INVALID_MAC_IN_NETWORK_VERIFY_KEY" />
                                    <controls:TextBoxHexMask Text="{Binding TestS0Settings.MACInNetworkKeyVerify, Converter={StaticResource ByteArrayToStringConverter}, Mode=TwoWay, UpdateSourceTrigger='PropertyChanged'}" 
                                                         SymbolsCount="16" AutomationProperties.AutomationId="ID_TB_INVALID_MAC_IN_NETWORK_VERIFY_VALUE"/>
                                    <CheckBox Content="Invalid Network Key  (Verify):" IsChecked="{Binding TestS0Settings.ValueInNetworkKeyVerifySpecified, Mode=TwoWay}"
                                          AutomationProperties.AutomationId="ID_CHK_INVALID_NETWORK_KEY_VERIFY_KEY"/>
                                    <controls:TextBoxHexMask Text="{Binding TestS0Settings.ValueInNetworkKeyVerify, Converter={StaticResource ByteArrayToStringConverter}, Mode=TwoWay, UpdateSourceTrigger='PropertyChanged'}" 
                                                         SymbolsCount="32" AutomationProperties.AutomationId="ID_TB_INVALID_NETWORK_KEY_VERIFY_VALUE"/>
                                    <CheckBox Content="Send invalid Scheme Report:" IsChecked="{Binding TestS0Settings.ValueInSchemeReportSpecified, Mode=TwoWay}"
                                          AutomationProperties.AutomationId="ID_CHK_SEND_INVALID_SCHEME_REPORT_KEY"/>
                                    <controls:NumericUpDown Value="{Binding TestS0Settings.ValueInSchemeReport, Mode=TwoWay}"
                                                        AutomationProperties.AutomationId="ID_CHK_SEND_INVALID_SCHEME_REPORT_VALUE"/>
                                    <CheckBox Content="Delay Scheme Report (sec):" IsChecked="{Binding TestS0Settings.DelaySchemeReportSpecified, Mode=TwoWay}"
                                          AutomationProperties.AutomationId="ID_TB_DELAY_SCHEME_REPORT_KEY"/>
                                    <controls:NumericUpDown Value="{Binding TestS0Settings.DelaySchemeReport, Mode=TwoWay}"
                                                        AutomationProperties.AutomationId="ID_TB_DELAY_SCHEME_REPORT_VALUE"/>
                                    <CheckBox Content="Delay Nonce Report (sec):" IsChecked="{Binding TestS0Settings.DelayNonceReportINSpecified, Mode=TwoWay}"
                                          AutomationProperties.AutomationId="ID_TB_DELAY_NONCE_REPORT_IN_KEY"/>
                                    <controls:NumericUpDown Value="{Binding TestS0Settings.DelayNonceReportIN, Mode=TwoWay}"
                                                        AutomationProperties.AutomationId="ID_TB_DELAY_NONCE_REPORT_IN_VALUE"/>
                                    <CheckBox Content="Delay Nonce Get (sec):" IsChecked="{Binding TestS0Settings.DelayNonceGetINSpecified, Mode=TwoWay}"
                                          AutomationProperties.AutomationId="ID_TB_DELAY_NONCE_GET_IN_KEY"/>
                                    <controls:NumericUpDown Value="{Binding TestS0Settings.DelayNonceGetIN, Mode=TwoWay}"
                                                        AutomationProperties.AutomationId="ID_TB_DELAY_NONCE_GET_IN_VALUE"/>
                                    <CheckBox Content="Delay Network Key Verify (sec):" IsChecked="{Binding TestS0Settings.DelayNetworkKeyVerifySpecified, Mode=TwoWay}"
                                          AutomationProperties.AutomationId="ID_TB_DELAY_NETWORK_KEY_VERIFY_KEY"/>
                                    <controls:NumericUpDown Value="{Binding TestS0Settings.DelayNetworkKeyVerify, Mode=TwoWay}"
                                                        AutomationProperties.AutomationId="ID_TB_DELAY_NETWORK_KEY_VERIFY_VALUE"/>
                                    <CheckBox Content="Delay Scheme Report (after Scheme Inherit) (sec):" IsChecked="{Binding TestS0Settings.DelaySchemeInheritReportSpecified, Mode=TwoWay}"
                                          AutomationProperties.AutomationId="ID_TB_DELAY_SCHEME_REPORT_AFTER_SCHEME_IHERIT_KEY"/>
                                    <controls:NumericUpDown Value="{Binding TestS0Settings.DelaySchemeInheritReport, Mode=TwoWay}"
                                                        AutomationProperties.AutomationId="ID_TB_DELAY_SCHEME_REPORT_AFTER_SCHEME_IHERIT_VALUE"/>
                                </UniformGrid>
                            </GroupBox>
                            <GroupBox>
                                <GroupBox.Header>
                                    <TextBlock Text="Send Data" />
                                </GroupBox.Header>
                                <UniformGrid Columns="2">
                                    <CheckBox Content="Reuse Receiver Nonce In Second Fragment:" IsChecked="{Binding TestS0Settings.ReuseReceiverNonceInSecondFragment, Mode=TwoWay}"
                                          AutomationProperties.AutomationId="ID_CHK_REUSE_NONCE_IN_SECOND_FRAGMENT"/>
                                </UniformGrid>
                            </GroupBox>
                        </StackPanel>
                    </StackPanel>
                </ScrollViewer>
            </TabItem>
            <TabItem Header="S2 Test Scheme" Selector.IsSelected="{Binding IsS2TabSelected}" AutomationProperties.AutomationId="ID_TAB_PAGE_S2_TEST_SCHEME">
                <TabItem.Resources>
                    <DataTemplate x:Key="HeaderTemplate">
                        <TextBlock Margin="0" Text="{Binding}"/>
                    </DataTemplate>
                </TabItem.Resources>
                <ScrollViewer>
                    <StackPanel IsEnabled="{Binding IsPauseSecurity, Converter={StaticResource InvertBoolConverter}}">
                        <DockPanel Margin="4" >
                            <CheckBox Content="Enable security test schema" VerticalAlignment="Top"     
                                      IsChecked="{Binding TestS2Settings.IsActive, Mode=TwoWay}"
                                      AutomationProperties.AutomationId="ID_CHK_ENABLE_S2_TEST_SCHEME"/>
                            <StackPanel Orientation="Horizontal" HorizontalAlignment="Right">
                                <Button Content="Save" Command="{StaticResource CommandSaveSecurityTestParametersToFile}" AutomationProperties.AutomationId="BTN_SAVE_SETTINGS"/>
                                <Button Content="Load" Command="{StaticResource CommandLoadSecurityTestParametersFromFile}" AutomationProperties.AutomationId="BTN_LOAD_SETTINGS"/>
                            </StackPanel>
                        </DockPanel>
                        <StackPanel IsEnabled="{Binding TestS2Settings.IsActive}">
                            <GroupBox Header="Security parameters overrides" >
                                <StackPanel Margin="0,4">
                                    <ListView bind:IgnoreMouseWheelBehavior.Attach="True"
                                                  ItemsSource="{Binding TestS2Settings.Parameters}" 
                                                  SelectedItem="{Binding SelectedTestParameterS2}">
                                        <ListView.View>
                                            <GridView>
                                                <GridViewColumn Header="Enabled" HeaderTemplate="{StaticResource HeaderTemplate}" Width="50">
                                                    <GridViewColumn.CellTemplate>
                                                        <DataTemplate>
                                                            <CheckBox IsChecked="{Binding IsEnabled, Mode=TwoWay}"/>
                                                        </DataTemplate>
                                                    </GridViewColumn.CellTemplate>
                                                </GridViewColumn>
                                                <GridViewColumn Header="Parameter Name" HeaderTemplate="{StaticResource HeaderTemplate}" Width="250">
                                                    <GridViewColumn.CellTemplate>
                                                        <DataTemplate>
                                                            <TextBlock Text="{Binding ParameterTypeV, Converter={StaticResource ParameterS2EnumDescriptionValueConverter}}"/>
                                                        </DataTemplate>
                                                    </GridViewColumn.CellTemplate>
                                                </GridViewColumn>
                                                <GridViewColumn Header="Value" HeaderTemplate="{StaticResource HeaderTemplate}" Width="500">
                                                    <GridViewColumn.CellTemplate>
                                                        <DataTemplate>
                                                            <TextBlock Text="{Binding Value, Converter={StaticResource ByteArrayToStringConverter}}"/>
                                                        </DataTemplate>
                                                    </GridViewColumn.CellTemplate>
                                                </GridViewColumn>
                                            </GridView>
                                        </ListView.View>
                                    </ListView>
                                    <UniformGrid Columns="2" Margin="32,4">
                                        <ComboBox ItemsSource="{Binding TestParametersS2Types}" 
                                                  SelectedItem="{Binding SelectedParameterS2Type, Mode=TwoWay}"
                                                  HorizontalAlignment="Left"
                                                  Width="200"
                                                  AutomationProperties.AutomationId="ID_CMB_S2_PARAMETER_TYPE">
                                            <ComboBox.ItemTemplate>
                                                <DataTemplate>
                                                    <ContentPresenter Content="{Binding Converter={StaticResource ParameterS2EnumDescriptionValueConverter}}"/>
                                                </DataTemplate>
                                            </ComboBox.ItemTemplate>
                                        </ComboBox>
                                        <controls:TextBoxHexMask Text="{Binding TestParameterS2Value, Converter={StaticResource ByteArrayToStringConverter}, Mode=TwoWay, UpdateSourceTrigger='PropertyChanged'}" 
                                                                 SymbolsCount="{Binding SelectedParameterS2Type, Converter={StaticResource ParameterS2TypeToSymbolCountConverter}}"
                                                                 AutomationProperties.AutomationId="ID_TB_S2_PARAMETER_VALUE"/>
                                    </UniformGrid>
                                    <StackPanel Margin="4" Orientation="Horizontal">
                                        <Button Content="Clear" Command="{StaticResource CommandClearParameters}" AutomationProperties.AutomationId="ID_BТN_S2_PARAMETER_CLEAR"/>
                                        <Button Content="Delete" Command="{StaticResource CommandDeleteParameter}"/>
                                        <Button Content="Set / Add" Command="{StaticResource CommandSetParameter}" AutomationProperties.AutomationId="ID_BТN_S2_PARAMETER_SET_ADD"/>
                                    </StackPanel>
                                </StackPanel>
                            </GroupBox>
                            <GroupBox Header="Message overrides">
                                <StackPanel Margin="0,4">
                                    <ListView bind:IgnoreMouseWheelBehavior.Attach="True" 
                                                  ItemsSource="{Binding TestS2Settings.Frames}" 
                                                  SelectedItem="{Binding SelectedTestFrameS2}">
                                        <ListView.View>
                                            <GridView>
                                                <GridViewColumn Header="Enabled" HeaderTemplate="{StaticResource HeaderTemplate}" Width="50">
                                                    <GridViewColumn.CellTemplate>
                                                        <DataTemplate>
                                                            <CheckBox IsChecked="{Binding IsEnabled, Mode=TwoWay}"/>
                                                        </DataTemplate>
                                                    </GridViewColumn.CellTemplate>
                                                </GridViewColumn>
                                                <GridViewColumn Header="Frame" HeaderTemplate="{StaticResource HeaderTemplate}" Width="150">
                                                    <GridViewColumn.CellTemplate>
                                                        <DataTemplate>
                                                            <TextBlock Text="{Binding FrameType}"/>
                                                        </DataTemplate>
                                                    </GridViewColumn.CellTemplate>
                                                </GridViewColumn>
                                                <GridViewColumn Header="Delay" HeaderTemplate="{StaticResource HeaderTemplate}" Width="35">
                                                    <GridViewColumn.CellTemplate>
                                                        <DataTemplate>
                                                            <TextBlock>
                                                                <TextBlock.Text>
                                                                    <MultiBinding Converter="{converters:IsValueSpecifiedConverter}">
                                                                        <Binding Path="DelaySpecified"/>
                                                                        <Binding Path="Delay"/>
                                                                    </MultiBinding>
                                                                </TextBlock.Text>
                                                            </TextBlock>
                                                        </DataTemplate>
                                                    </GridViewColumn.CellTemplate>
                                                </GridViewColumn>
                                                <GridViewColumn Header="Multicast" HeaderTemplate="{StaticResource HeaderTemplate}" Width="55">
                                                    <GridViewColumn.CellTemplate>
                                                        <DataTemplate>
                                                            <CheckBox IsEnabled="False" Style="{StaticResource CheckBoxMark}">
                                                                <CheckBox.IsChecked>
                                                                    <MultiBinding Converter="{converters:IsValueSpecifiedConverter}">
                                                                        <Binding Path="IsMulticastSpecified"/>
                                                                        <Binding Path="IsMulticast"/>
                                                                    </MultiBinding>
                                                                </CheckBox.IsChecked>
                                                            </CheckBox>
                                                        </DataTemplate>
                                                    </GridViewColumn.CellTemplate>
                                                </GridViewColumn>
                                                <GridViewColumn Header="Broadcast" HeaderTemplate="{StaticResource HeaderTemplate}" Width="55">
                                                    <GridViewColumn.CellTemplate>
                                                        <DataTemplate>
                                                            <CheckBox IsEnabled="False" Style="{StaticResource CheckBoxMark}">
                                                                <CheckBox.IsChecked>
                                                                    <MultiBinding Converter="{converters:IsValueSpecifiedConverter}">
                                                                        <Binding Path="IsBroadcastSpecified"/>
                                                                        <Binding Path="IsBroadcast"/>
                                                                    </MultiBinding>
                                                                </CheckBox.IsChecked>
                                                            </CheckBox>
                                                        </DataTemplate>
                                                    </GridViewColumn.CellTemplate>
                                                </GridViewColumn>
                                                <GridViewColumn Header="Encrypted" HeaderTemplate="{StaticResource HeaderTemplate}" Width="55">
                                                    <GridViewColumn.CellTemplate>
                                                        <DataTemplate>
                                                            <CheckBox IsEnabled="False" Style="{StaticResource CheckBoxMark}">
                                                                <CheckBox.IsChecked>
                                                                    <MultiBinding Converter="{converters:IsValueSpecifiedConverter}">
                                                                        <Binding Path="IsEncryptedSpecified"/>
                                                                        <Binding Path="IsEncrypted"/>
                                                                    </MultiBinding>
                                                                </CheckBox.IsChecked>
                                                            </CheckBox>
                                                        </DataTemplate>
                                                    </GridViewColumn.CellTemplate>
                                                </GridViewColumn>
                                                <GridViewColumn Header="Temp" HeaderTemplate="{StaticResource HeaderTemplate}" Width="35">
                                                    <GridViewColumn.CellTemplate>
                                                        <DataTemplate>
                                                            <CheckBox IsEnabled="False" Style="{StaticResource CheckBoxMark}">
                                                                <CheckBox.IsChecked>
                                                                    <MultiBinding Converter="{converters:IsValueSpecifiedConverter}">
                                                                        <Binding Path="IsEncryptedSpecified"/>
                                                                        <Binding Path="IsTemp"/>
                                                                    </MultiBinding>
                                                                </CheckBox.IsChecked>
                                                            </CheckBox>
                                                        </DataTemplate>
                                                    </GridViewColumn.CellTemplate>
                                                </GridViewColumn>
                                                <GridViewColumn Header="Network Key" HeaderTemplate="{StaticResource HeaderTemplate}" Width="150">
                                                    <GridViewColumn.CellTemplate>
                                                        <DataTemplate>
                                                            <TextBlock Text="{Binding NetworkKey, Converter={StaticResource ByteArrayToStringConverter}}"/>
                                                        </DataTemplate>
                                                    </GridViewColumn.CellTemplate>
                                                </GridViewColumn>
                                                <GridViewColumn Header="Command" HeaderTemplate="{StaticResource HeaderTemplate}" Width="260">
                                                    <GridViewColumn.CellTemplate>
                                                        <DataTemplate>
                                                            <TextBlock Text="{Binding Command, Converter={StaticResource ByteArrayToStringConverter}}"/>
                                                        </DataTemplate>
                                                    </GridViewColumn.CellTemplate>
                                                </GridViewColumn>
                                            </GridView>
                                        </ListView.View>
                                    </ListView>
                                    <UniformGrid Columns="2" Margin="32,4">
                                        <TextBlock Text="Test Frame"/>
                                        <ComboBox ItemsSource="{Binding Source={StaticResource PossibleValues}}" 
                                          SelectedValue="{Binding ActiveTestFrameIndex, UpdateSourceTrigger=PropertyChanged}"
                                          AutomationProperties.AutomationId="ID_CMB_S2_TESTFRAME_TYPE"/>
                                        <CheckBox Content="Command:" IsChecked="{Binding TestFrameCommand.IsSet, Mode=TwoWay}"
                                                  AutomationProperties.AutomationId="ID_CHK_FRAME_COMMAND"/>
                                        <controls:TextBoxHexMask Text="{Binding TestFrameCommand.Value, Converter={StaticResource ByteArrayToStringConverter}, Mode=TwoWay, UpdateSourceTrigger='PropertyChanged'}" 
                                                                 SymbolsCount="1000" IsEnabled="{Binding TestFrameCommand.IsSet}"
                                                                 AutomationProperties.AutomationId="ID_TB_FRAME_COMMAND_VALUE"/>
                                        <CheckBox Content="Delay (sec):" IsChecked="{Binding TestFrameDelay.IsSet, Mode=TwoWay}"
                                                  AutomationProperties.AutomationId="ID_CHK_FRAME_DELAY"/>
                                        <controls:NumericUpDown 
                                            Value="{Binding TestFrameDelay.Value, Mode=TwoWay}" 
                                            IsEnabled="{Binding TestFrameDelay.IsSet}"
                                            AutomationProperties.AutomationId="ID_TB_FRAME_DELAY_VALUE"/>
                                        <CheckBox Content="Is Multicast:" IsChecked="{Binding TestFrameIsMulticast.IsSet, Mode=TwoWay}" AutomationProperties.AutomationId="ID_CHK_FRAME_MULT"/>
                                        <CheckBox IsChecked="{Binding TestFrameIsMulticast.Value, Mode=TwoWay}"
                                          IsEnabled="{Binding TestFrameIsMulticast.IsSet}" AutomationProperties.AutomationId="ID_CHK_FRAME_MULT_VALUE"/>
                                        <CheckBox Content="Is Broadcast:" IsChecked="{Binding TestFrameIsBroadcast.IsSet, Mode=TwoWay}" AutomationProperties.AutomationId="ID_CHK_FRAME_BROAD"/>
                                        <CheckBox IsChecked="{Binding TestFrameIsBroadcast.Value, Mode=TwoWay}"
                                          IsEnabled="{Binding TestFrameIsBroadcast.IsSet}" AutomationProperties.AutomationId="ID_CHK_FRAME_BROAD_VALUE"/>
                                    </UniformGrid>
                                    <UniformGrid Columns="2" Margin="32,0,32,4">
                                        <CheckBox Content="Is Encrypted:" IsChecked="{Binding TestFrameIsEncrypted.IsSet, Mode=TwoWay}"
                                                  AutomationProperties.AutomationId="ID_CHK_FRAME_ENCRYPTED"/>
                                        <CheckBox IsChecked="{Binding TestFrameIsEncrypted.Value, Mode=TwoWay}"
                                                  IsEnabled="{Binding TestFrameIsEncrypted.IsSet}"
                                                  AutomationProperties.AutomationId="ID_CHK_FRAME_ENCRYPTED_VALUE"/>
                                        <CheckBox Content="Network Key:" IsChecked="{Binding TestFrameNetworkKey.IsSet, Mode=TwoWay}"
                                                  AutomationProperties.AutomationId="ID_CHK_FRAME_NETWORK_KEY"/>
                                        <controls:TextBoxHexMask Text="{Binding TestFrameNetworkKey.Value, Converter={StaticResource ByteArrayToStringConverter}, Mode=TwoWay, UpdateSourceTrigger='PropertyChanged'}" 
                                                                 SymbolsCount="32" IsEnabled="{Binding TestFrameNetworkKey.IsSet}"
                                                                 AutomationProperties.AutomationId="ID_TB_FRAME_NETWORK_KEY_VALUE"/>
                                        <CheckBox Content="Is Temp Network Key:" IsChecked="{Binding TestFrameIsTemp.IsSet, Mode=TwoWay}"
                                                  AutomationProperties.AutomationId="ID_CHK_FRAME_TEMP_KEY"/>
                                        <CheckBox IsChecked="{Binding TestFrameIsTemp.Value, Mode=TwoWay}"
                                                  IsEnabled="{Binding TestFrameIsTemp.IsSet}"
                                                  AutomationProperties.AutomationId="ID_CHK_FRAME_TEMP_KEY_VALUE"/>
                                        <UniformGrid.Style>
                                            <Style>
                                                <Style.Triggers>
                                                    <DataTrigger Binding="{Binding ActiveTestFrameIndex}" Value="NonceGet">
                                                        <Setter Property="UniformGrid.Visibility" Value="Hidden"/>
                                                    </DataTrigger>
                                                </Style.Triggers>
                                            </Style>
                                        </UniformGrid.Style>
                                    </UniformGrid>
                                    <StackPanel Margin="4" Orientation="Horizontal">
                                        <Button Content="Clear" Command="{StaticResource CommandClearFrames}" AutomationProperties.AutomationId="ID_BТN_S2_FRAMES_CLEAR"/>
                                        <Button Content="Delete" Command="{StaticResource CommandDeleteFrame}"/>
                                        <Button Content="Set / Add" Command="{StaticResource CommandSetFrame}" AutomationProperties.AutomationId="ID_BТN_S2_FRAMES_SET_ADD"/>
                                    </StackPanel>
                                </StackPanel>
                            </GroupBox>
                            <GroupBox Header="Extension overrides">
                                <StackPanel Margin="0,4">
                                    <StackPanel Margin="32,4">
                                        <CheckBox Content="Cleanup existing extensions first" IsChecked="{Binding TestS2Settings.IsOverrideExistingExtensions, Mode=TwoWay}"
                                                  AutomationProperties.AutomationId="ID_CHK_CLEANUP_EXISTING_EXTENSION"/>
                                    </StackPanel>
                                    <ListView bind:IgnoreMouseWheelBehavior.Attach="True"
                                                  ItemsSource="{Binding TestS2Settings.Extensions}" 
                                                  SelectedItem="{Binding SelectedTestExtensionS2}">
                                        <ListView.View>
                                            <GridView>
                                                <GridViewColumn Header="Enabled" HeaderTemplate="{StaticResource HeaderTemplate}" Width="50">
                                                    <GridViewColumn.CellTemplate>
                                                        <DataTemplate>
                                                            <CheckBox IsChecked="{Binding IsEnabled, Mode=TwoWay}"/>
                                                        </DataTemplate>
                                                    </GridViewColumn.CellTemplate>
                                                </GridViewColumn>
                                                <GridViewColumn Header="Action" HeaderTemplate="{StaticResource HeaderTemplate}" Width="100">
                                                    <GridViewColumn.CellTemplate>
                                                        <DataTemplate>
                                                            <TextBlock Text="{Binding Action}"/>
                                                        </DataTemplate>
                                                    </GridViewColumn.CellTemplate>
                                                </GridViewColumn>
                                                <GridViewColumn Header="Message" HeaderTemplate="{StaticResource HeaderTemplate}" Width="130">
                                                    <GridViewColumn.CellTemplate>
                                                        <DataTemplate>
                                                            <TextBlock Text="{Binding MessageType}"/>
                                                        </DataTemplate>
                                                    </GridViewColumn.CellTemplate>
                                                </GridViewColumn>
                                                <GridViewColumn Header="Counter" HeaderTemplate="{StaticResource HeaderTemplate}" Width="55">
                                                    <GridViewColumn.CellTemplate>
                                                        <DataTemplate>
                                                            <StackPanel Orientation="Horizontal">
                                                                <TextBlock Text="{Binding Counter.Value}"/>
                                                                <TextBlock Text=" of " Visibility="{Binding NumOfUsageSpecified, Converter={StaticResource BooleanToVisibilityConverter}}"/>
                                                                <TextBlock>
                                                                    <TextBlock.Text>
                                                                        <MultiBinding Converter="{converters:IsValueSpecifiedConverter}">
                                                                            <Binding Path="NumOfUsageSpecified"/>
                                                                            <Binding Path="NumOfUsage" />
                                                                        </MultiBinding>
                                                                    </TextBlock.Text>
                                                                </TextBlock>
                                                            </StackPanel>
                                                        </DataTemplate>
                                                    </GridViewColumn.CellTemplate>
                                                </GridViewColumn>
                                                <GridViewColumn Header="Extension" HeaderTemplate="{StaticResource HeaderTemplate}" Width="55">
                                                    <GridViewColumn.CellTemplate>
                                                        <DataTemplate>
                                                            <TextBlock Text="{Binding ExtensionType}"/>
                                                        </DataTemplate>
                                                    </GridViewColumn.CellTemplate>
                                                </GridViewColumn>
                                                <GridViewColumn Header="Encrypted" HeaderTemplate="{StaticResource HeaderTemplate}" Width="55">
                                                    <GridViewColumn.CellTemplate>
                                                        <DataTemplate>
                                                            <CheckBox IsEnabled="False" Style="{StaticResource CheckBoxMark}">
                                                                <CheckBox.IsChecked>
                                                                    <MultiBinding Converter="{converters:IsValueSpecifiedConverter}">
                                                                        <Binding Path="IsEncryptedSpecified"/>
                                                                        <Binding Path="IsEncrypted"/>
                                                                    </MultiBinding>
                                                                </CheckBox.IsChecked>
                                                            </CheckBox>
                                                        </DataTemplate>
                                                    </GridViewColumn.CellTemplate>
                                                </GridViewColumn>
                                                <GridViewColumn Header="Length" HeaderTemplate="{StaticResource HeaderTemplate}" Width="45">
                                                    <GridViewColumn.CellTemplate>
                                                        <DataTemplate>
                                                            <TextBlock>
                                                                <TextBlock.Text>
                                                                    <MultiBinding Converter="{converters:IsValueSpecifiedConverter}">
                                                                        <Binding Path="ExtensionLengthSpecified"/>
                                                                        <Binding Path="ExtensionLength"/>
                                                                    </MultiBinding>
                                                                </TextBlock.Text>
                                                            </TextBlock>
                                                        </DataTemplate>
                                                    </GridViewColumn.CellTemplate>
                                                </GridViewColumn>
                                                <GridViewColumn Header="More To Follow" HeaderTemplate="{StaticResource HeaderTemplate}" Width="85">
                                                    <GridViewColumn.CellTemplate>
                                                        <DataTemplate>
                                                            <CheckBox IsEnabled="False" Style="{StaticResource CheckBoxMark}">
                                                                <CheckBox.IsChecked>
                                                                    <MultiBinding Converter="{converters:IsValueSpecifiedConverter}">
                                                                        <Binding Path="IsMoreToFollowSpecified"/>
                                                                        <Binding Path="IsMoreToFollow"/>
                                                                    </MultiBinding>
                                                                </CheckBox.IsChecked>
                                                            </CheckBox>
                                                        </DataTemplate>
                                                    </GridViewColumn.CellTemplate>
                                                </GridViewColumn>
                                                <GridViewColumn Header="Critical" HeaderTemplate="{StaticResource HeaderTemplate}" Width="45">
                                                    <GridViewColumn.CellTemplate>
                                                        <DataTemplate>
                                                            <CheckBox IsEnabled="False" Style="{StaticResource CheckBoxMark}">
                                                                <CheckBox.IsChecked>
                                                                    <MultiBinding Converter="{converters:IsValueSpecifiedConverter}">
                                                                        <Binding Path="IsCriticalSpecified"/>
                                                                        <Binding Path="IsCritical"/>
                                                                    </MultiBinding>
                                                                </CheckBox.IsChecked>
                                                            </CheckBox>
                                                        </DataTemplate>
                                                    </GridViewColumn.CellTemplate>
                                                </GridViewColumn>
                                                <GridViewColumn Header="Value" HeaderTemplate="{StaticResource HeaderTemplate}" Width="220">
                                                    <GridViewColumn.CellTemplate>
                                                        <DataTemplate>
                                                            <TextBlock Text="{Binding Value, Converter={StaticResource ByteArrayToStringConverter}}"/>
                                                        </DataTemplate>
                                                    </GridViewColumn.CellTemplate>
                                                </GridViewColumn>
                                            </GridView>
                                        </ListView.View>
                                    </ListView>
                                    <UniformGrid Columns="2" Margin="32,4">
                                        <TextBlock Text="Message type"/>
                                        <ComboBox ItemsSource="{Binding Source={StaticResource PossibleMessageTypeValues}}" SelectedValue="{Binding TestExtensionMessageTypeS2, UpdateSourceTrigger=PropertyChanged}"
                                                  AutomationProperties.AutomationId="ID_CMB_EXTENSION_MESSAGE_TYPE"/>
                                        <TextBlock Text="Extension type"/>
                                        <ComboBox ItemsSource="{Binding Source={StaticResource PossibleExtensionTypeValues}}" SelectedValue="{Binding TestExtensionTypeS2, UpdateSourceTrigger=PropertyChanged}"
                                                  AutomationProperties.AutomationId="ID_CMB_EXTENSION_TYPE"/>
                                        <TextBlock Text="Applied action"/>
                                        <ComboBox ItemsSource="{Binding Source={StaticResource PossibleAppliedActionValues}}" SelectedValue="{Binding TestExtensionS2AppliedAction, UpdateSourceTrigger=PropertyChanged}"
                                                  AutomationProperties.AutomationId="ID_CMB_APPLIED_ACTION"/>
                                        <StackPanel Orientation="Horizontal">
                                            <CheckBox AutomationProperties.AutomationId="ID_CHK_HAS_VALUE"
                                                  IsChecked="{Binding TestExtensionHasValue.IsSet, Mode=TwoWay}">
                                            </CheckBox>
                                            <TextBlock Text="Extension value"/>
                                        </StackPanel>
                                        <controls:TextBoxHexMask Text="{Binding TestExtensionValueS2, Converter={StaticResource ByteArrayToStringConverter}, Mode=TwoWay, UpdateSourceTrigger='PropertyChanged'}"
                                                                 IsEnabled="{Binding TestExtensionHasValue.IsSet}"
                                                                 AutomationProperties.AutomationId="ID_TB_EXTENSION_VALUE"/>
                                        <CheckBox AutomationProperties.AutomationId="ID_CHK_EXTENSION_ENCRYPTED_KEY"
                                                  IsChecked="{Binding TestExtensionIsEncryptedS2.IsSet, Mode=TwoWay}">
                                            Is Encrypted:
                                        </CheckBox>
                                        <CheckBox AutomationProperties.AutomationId="ID_CHK_EXTENSION_ENCRYPTED_VALUE"
                                                  IsChecked="{Binding TestExtensionIsEncryptedS2.Value, Mode=TwoWay}" 
                                                  IsEnabled="{Binding TestExtensionIsEncryptedS2.IsSet}"/>
                                        <CheckBox AutomationProperties.AutomationId="ID_CHK_EXTENSION_LENGHT_KEY"
                                                  IsChecked="{Binding TestExtensionLengthS2.IsSet, Mode=TwoWay}">
                                            Extension length
                                        </CheckBox>
                                        <controls:NumericUpDown AutomationProperties.AutomationId="ID_TB_EXTENSION_LENGHT_VALUE"
                                                                    Value="{Binding TestExtensionLengthS2.Value, Mode=TwoWay}"
                                                                    IsEnabled="{Binding TestExtensionLengthS2.IsSet}"/>
                                        <CheckBox AutomationProperties.AutomationId="ID_CHK_EXTENSION_MORE_TO_FOLLOW_KEY"
                                            IsChecked="{Binding TestExtensionIsMoreToFollowS2.IsSet, Mode=TwoWay}">More to follow:</CheckBox>
                                        <CheckBox AutomationProperties.AutomationId="ID_CHK_EXTENSION_MORE_TO_FOLLOW_VALUE"
                                            IsChecked="{Binding TestExtensionIsMoreToFollowS2.Value, Mode=TwoWay}" 
                                                          IsEnabled="{Binding TestExtensionIsMoreToFollowS2.IsSet}"/>
                                        <CheckBox AutomationProperties.AutomationId="ID_CHK_EXTENSION_CRITICAL_KEY"
                                            IsChecked="{Binding TestExtensionIsCriticalS2.IsSet, Mode=TwoWay}">Is Critical:</CheckBox>
                                        <CheckBox AutomationProperties.AutomationId="ID_CHK_EXTENSION_CRITICAL_VALUE"
                                            IsChecked="{Binding TestExtensionIsCriticalS2.Value, Mode=TwoWay}" 
                                                          IsEnabled="{Binding TestExtensionIsCriticalS2.IsSet}"/>
                                        <CheckBox AutomationProperties.AutomationId="ID_CHK_EXTENSION_NUMBER_OF_USAGE_KEY"
                                            IsChecked="{Binding TestExtensionNumOfUsageS2.IsSet, Mode=TwoWay}">Number of usage (counter reset on click button 'OK' or 'Apply')</CheckBox>
                                        <controls:NumericUpDown AutomationProperties.AutomationId="ID_TB_EXTENSION_NUMBER_OF_USAGE_VALUE"
                                            Value="{Binding TestExtensionNumOfUsageS2.Value, Mode=TwoWay}"
                                                                        MinValue="1"
                                                                        MaxValue="100"
                                                                        IsEnabled="{Binding TestExtensionNumOfUsageS2.IsSet}"/>
                                    </UniformGrid>
                                    <StackPanel Margin="4" Orientation="Horizontal">
                                        <Button Content="Clear" Command="{StaticResource CommandClearExtensions}" AutomationProperties.AutomationId="ID_BTN_S2_EXTENSION_CLEAR"/>
                                        <Button Content="Delete" Command="{StaticResource CommandDeleteExtension}"/>
                                        <Button Content="Set" Command="{StaticResource CommandSetExtension}"/>
                                        <Button Content="Add" Command="{StaticResource CommandAddExtension}" AutomationProperties.AutomationId="ID_BTN_S2_EXTENSION_ADD"/>
                                    </StackPanel>
                                </StackPanel>
                            </GroupBox>
                        </StackPanel>
                    </StackPanel>
                </ScrollViewer>
            </TabItem>
        </TabControl>
    </DockPanel>
</UserControl>
